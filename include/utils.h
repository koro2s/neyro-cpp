/**
 * @file utils.h
 * @brief Вспомогательные функции
 * @author Зянг
 * @date 2025
 * @version 1.0
 */

#pragma once
#include <opencv2/opencv.hpp>

/**
 * @brief Применяет функцию softmax к входному вектору логитов.
 *
 * Эта функция принимает матрицу (обычно одномерную), содержащую логиты (сырые выходы нейросети),
 * и возвращает нормализованный вектор вероятностей, полученных с помощью softmax.
 *
 * @param logits Одномерная матрица (cv::Mat) с логитами.
 * @return cv::Mat Та же размерность, что и вход, но с нормализованными вероятностями.
 *
 * @note Входная матрица должна быть float-типом. Если логиты — многомерные,
 * необходимо предварительно привести к одномерному виду.
 */
cv::Mat softmax(const cv::Mat& logits);

/**
 * @brief Проверяет существование файла по указанному пути.
 *
 * Использует POSIX-функцию `stat` для определения, существует ли файл.
 *
 * @param path Путь к файлу.
 * @return true Если файл существует.
 * @return false Если файл не найден или произошла ошибка при проверке.
 */
bool fileExists(const std::string& path);

/**
 * @struct ProgramOptions
 * @brief Хранит все параметры программы, полученные из аргументов командной строки
 */
struct ProgramOptions {
    std::string modelFile;       ///< Путь к файлу модели (обязательный параметр)
    std::string playlistsFile;   ///< Путь к файлу плейлистов (обязательный параметр)
    std::string imageFile;       ///< Путь к файлу изображения (опционально)
    std::string directory;       ///< Путь к директории для пакетной обработки (опционально)
    std::string loggerFile;      ///< Путь к файлу логов (опционально)
    bool infiniteMode = false;   ///< Флаг бесконечного режима работы (по умолчанию: false)
    bool helpRequested = false;  ///< Флаг запроса справки (по умолчанию: false)
};

/**
 * @brief Выводит справочную информацию о программе
 *
 * Отображает форматированный текст справки со списком всех параметров,
 * обязательных аргументов и примерами использования в стандартный вывод.
 */
void showHelp();

/**
 * @brief Разбирает аргументы командной строки
 * @param argc Количество аргументов (из main())
 * @param argv Массив аргументов (из main())
 * @return Структура ProgramOptions с разобранными значениями
 * @throw std::runtime_error При неверных аргументах или отсутствии обязательных параметров
 *
 * Выполняет:
 * - Проверку обязательных параметров
 * - Проверку взаимоисключающих опций
 * - Базовую валидацию параметров
 */
ProgramOptions parseArguments(int argc, char* argv[]);

/**
 * @brief Получает список файлов в указанной директории
 * @param directoryPath Путь к сканируемой директории
 * @return Вектор имен файлов (без пути)
 *
 * Возвращает имена всех обычных файлов в директории (игнорирует поддиректории)
 */
std::vector<std::string> getFilenamesInDirectory(const std::string& directoryPath);
